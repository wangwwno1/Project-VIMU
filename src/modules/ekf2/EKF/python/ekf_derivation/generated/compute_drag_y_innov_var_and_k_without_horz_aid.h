// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_drag_y_innov_var_and_k_without_horz_aid
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix24_24
 *     rho: Scalar
 *     cd: Scalar
 *     cm: Scalar
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov_var: Scalar
 *     K: Matrix24_1
 */
template <typename Scalar>
void ComputeDragYInnovVarAndKWithoutHorzAid(const matrix::Matrix<Scalar, 24, 1>& state,
                                            const matrix::Matrix<Scalar, 24, 24>& P,
                                            const Scalar rho, const Scalar cd, const Scalar cm,
                                            const Scalar R, const Scalar epsilon,
                                            Scalar* const innov_var = nullptr,
                                            matrix::Matrix<Scalar, 24, 1>* const K = nullptr) {
  // Total ops: 363

  // Input arrays

  // Intermediate terms (63)
  const Scalar _tmp0 = 2 * state(4, 0);
  const Scalar _tmp1 = _tmp0 * state(3, 0);
  const Scalar _tmp2 = 2 * state(5, 0);
  const Scalar _tmp3 = _tmp2 * state(0, 0);
  const Scalar _tmp4 = 2 * state(6, 0);
  const Scalar _tmp5 = _tmp4 * state(1, 0);
  const Scalar _tmp6 = -_tmp1 + _tmp3 + _tmp5;
  const Scalar _tmp7 = _tmp0 * state(0, 0);
  const Scalar _tmp8 = _tmp2 * state(3, 0);
  const Scalar _tmp9 = _tmp4 * state(2, 0);
  const Scalar _tmp10 = _tmp7 + _tmp8 - _tmp9;
  const Scalar _tmp11 = state(0, 0) * state(2, 0);
  const Scalar _tmp12 = state(1, 0) * state(3, 0);
  const Scalar _tmp13 = state(0, 0) * state(3, 0);
  const Scalar _tmp14 = state(1, 0) * state(2, 0);
  const Scalar _tmp15 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp16 = -_tmp15;
  const Scalar _tmp17 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp18 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp19 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp20 = _tmp18 - _tmp19;
  const Scalar _tmp21 = _tmp16 + _tmp17 + _tmp20;
  const Scalar _tmp22 =
      _tmp2 * (_tmp13 + _tmp14) + _tmp21 * state(4, 0) + _tmp4 * (-_tmp11 + _tmp12);
  const Scalar _tmp23 = 2 * _tmp22;
  const Scalar _tmp24 = state(2, 0) * state(3, 0);
  const Scalar _tmp25 = state(0, 0) * state(1, 0);
  const Scalar _tmp26 = -_tmp17;
  const Scalar _tmp27 = _tmp16 + _tmp18 + _tmp19 + _tmp26;
  const Scalar _tmp28 =
      _tmp0 * (-_tmp13 + _tmp14) + _tmp27 * state(5, 0) + _tmp4 * (_tmp24 + _tmp25);
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 = _tmp0 * state(2, 0);
  const Scalar _tmp31 = _tmp2 * state(1, 0);
  const Scalar _tmp32 = _tmp4 * state(0, 0);
  const Scalar _tmp33 = _tmp30 - _tmp31 + _tmp32;
  const Scalar _tmp34 = _tmp15 + _tmp20 + _tmp26;
  const Scalar _tmp35 =
      _tmp0 * (_tmp11 + _tmp12) + _tmp2 * (_tmp24 - _tmp25) + _tmp34 * state(6, 0);
  const Scalar _tmp36 = 2 * _tmp35;
  const Scalar _tmp37 = std::sqrt(Scalar(std::pow(_tmp22, Scalar(2)) + std::pow(_tmp28, Scalar(2)) +
                                         std::pow(_tmp35, Scalar(2)) + epsilon));
  const Scalar _tmp38 = cd * rho;
  const Scalar _tmp39 = Scalar(0.25) * _tmp28 * _tmp38 / _tmp37;
  const Scalar _tmp40 = Scalar(0.5) * _tmp37 * _tmp38;
  const Scalar _tmp41 =
      -_tmp39 * (_tmp10 * _tmp23 + _tmp29 * _tmp6 + _tmp33 * _tmp36) - _tmp40 * _tmp6 - _tmp6 * cm;
  const Scalar _tmp42 = 2 * _tmp13;
  const Scalar _tmp43 = 2 * _tmp14;
  const Scalar _tmp44 = -_tmp42 + _tmp43;
  const Scalar _tmp45 = 2 * _tmp11;
  const Scalar _tmp46 = 2 * _tmp12;
  const Scalar _tmp47 = -_tmp39 * (_tmp21 * _tmp23 + _tmp29 * _tmp44 + _tmp36 * (_tmp45 + _tmp46)) -
                        _tmp40 * _tmp44 - _tmp44 * cm;
  const Scalar _tmp48 = _tmp0 * state(1, 0) + _tmp2 * state(2, 0) + _tmp4 * state(3, 0);
  const Scalar _tmp49 =
      -_tmp39 * (_tmp10 * _tmp36 + _tmp23 * (-_tmp30 + _tmp31 - _tmp32) + _tmp29 * _tmp48) -
      _tmp40 * _tmp48 - _tmp48 * cm;
  const Scalar _tmp50 = 2 * _tmp24;
  const Scalar _tmp51 = 2 * _tmp25;
  const Scalar _tmp52 =
      -_tmp27 * _tmp40 - _tmp27 * cm -
      _tmp39 * (_tmp23 * (_tmp42 + _tmp43) + _tmp27 * _tmp29 + _tmp36 * (_tmp50 - _tmp51));
  const Scalar _tmp53 =
      -_tmp33 * _tmp40 - _tmp33 * cm -
      _tmp39 * (_tmp23 * _tmp48 + _tmp29 * _tmp33 + _tmp36 * (_tmp1 - _tmp3 - _tmp5));
  const Scalar _tmp54 = _tmp50 + _tmp51;
  const Scalar _tmp55 =
      -_tmp39 * (_tmp23 * (-_tmp45 + _tmp46) + _tmp29 * _tmp54 + _tmp34 * _tmp36) -
      _tmp40 * _tmp54 - _tmp54 * cm;
  const Scalar _tmp56 = -_tmp7 - _tmp8 + _tmp9;
  const Scalar _tmp57 = -_tmp39 * (_tmp23 * _tmp6 + _tmp29 * _tmp56 + _tmp36 * _tmp48) -
                        _tmp40 * _tmp56 - _tmp56 * cm;
  const Scalar _tmp58 = P(6, 6) * _tmp55;
  const Scalar _tmp59 = P(5, 5) * _tmp52;
  const Scalar _tmp60 = P(4, 4) * _tmp47;
  const Scalar _tmp61 =
      R +
      _tmp41 * (P(0, 0) * _tmp41 + P(1, 0) * _tmp53 + P(2, 0) * _tmp49 + P(3, 0) * _tmp57 +
                P(4, 0) * _tmp47 + P(5, 0) * _tmp52 + P(6, 0) * _tmp55) +
      _tmp47 * (P(0, 4) * _tmp41 + P(1, 4) * _tmp53 + P(2, 4) * _tmp49 + P(3, 4) * _tmp57 +
                P(5, 4) * _tmp52 + P(6, 4) * _tmp55 + _tmp60) +
      _tmp49 * (P(0, 2) * _tmp41 + P(1, 2) * _tmp53 + P(2, 2) * _tmp49 + P(3, 2) * _tmp57 +
                P(4, 2) * _tmp47 + P(5, 2) * _tmp52 + P(6, 2) * _tmp55) +
      _tmp52 * (P(0, 5) * _tmp41 + P(1, 5) * _tmp53 + P(2, 5) * _tmp49 + P(3, 5) * _tmp57 +
                P(4, 5) * _tmp47 + P(6, 5) * _tmp55 + _tmp59) +
      _tmp53 * (P(0, 1) * _tmp41 + P(1, 1) * _tmp53 + P(2, 1) * _tmp49 + P(3, 1) * _tmp57 +
                P(4, 1) * _tmp47 + P(5, 1) * _tmp52 + P(6, 1) * _tmp55) +
      _tmp55 * (P(0, 6) * _tmp41 + P(1, 6) * _tmp53 + P(2, 6) * _tmp49 + P(3, 6) * _tmp57 +
                P(4, 6) * _tmp47 + P(5, 6) * _tmp52 + _tmp58) +
      _tmp57 * (P(0, 3) * _tmp41 + P(1, 3) * _tmp53 + P(2, 3) * _tmp49 + P(3, 3) * _tmp57 +
                P(4, 3) * _tmp47 + P(5, 3) * _tmp52 + P(6, 3) * _tmp55);
  const Scalar _tmp62 = Scalar(1.0) / (math::max<Scalar>(_tmp61, epsilon));

  // Output terms (2)
  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var = _tmp61;
  }

  if (K != nullptr) {
    matrix::Matrix<Scalar, 24, 1>& _k = (*K);

    _k.setZero();

    _k(4, 0) = _tmp62 * (P(4, 0) * _tmp41 + P(4, 1) * _tmp53 + P(4, 2) * _tmp49 + P(4, 3) * _tmp57 +
                         P(4, 5) * _tmp52 + P(4, 6) * _tmp55 + _tmp60);
    _k(5, 0) = _tmp62 * (P(5, 0) * _tmp41 + P(5, 1) * _tmp53 + P(5, 2) * _tmp49 + P(5, 3) * _tmp57 +
                         P(5, 4) * _tmp47 + P(5, 6) * _tmp55 + _tmp59);
    _k(6, 0) = _tmp62 * (P(6, 0) * _tmp41 + P(6, 1) * _tmp53 + P(6, 2) * _tmp49 + P(6, 3) * _tmp57 +
                         P(6, 4) * _tmp47 + P(6, 5) * _tmp52 + _tmp58);
    _k(7, 0) = _tmp62 * (P(7, 0) * _tmp41 + P(7, 1) * _tmp53 + P(7, 2) * _tmp49 + P(7, 3) * _tmp57 +
                         P(7, 4) * _tmp47 + P(7, 5) * _tmp52 + P(7, 6) * _tmp55);
    _k(8, 0) = _tmp62 * (P(8, 0) * _tmp41 + P(8, 1) * _tmp53 + P(8, 2) * _tmp49 + P(8, 3) * _tmp57 +
                         P(8, 4) * _tmp47 + P(8, 5) * _tmp52 + P(8, 6) * _tmp55);
    _k(9, 0) = _tmp62 * (P(9, 0) * _tmp41 + P(9, 1) * _tmp53 + P(9, 2) * _tmp49 + P(9, 3) * _tmp57 +
                         P(9, 4) * _tmp47 + P(9, 5) * _tmp52 + P(9, 6) * _tmp55);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
