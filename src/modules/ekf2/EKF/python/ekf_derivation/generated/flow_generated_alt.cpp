// Sub Expressions
const float HK0 = Tbs(1,0)*q2;
const float HK1 = Tbs(1,1)*q1;
const float HK2 = Tbs(1,1)*q3;
const float HK3 = Tbs(1,2)*q2;
const float HK4 = Tbs(1,0)*q3;
const float HK5 = Tbs(1,2)*q1;
const float HK6 = -HK5;
const float HK7 = vd*(HK0 - HK1) - ve*(HK4 + HK6) + vn*(HK2 - HK3);
const float HK8 = 1.0F/(range);
const float HK9 = 2*HK8;
const float HK10 = Tbs(1,1)*q2;
const float HK11 = Tbs(1,2)*q3;
const float HK12 = Tbs(1,1)*q0;
const float HK13 = Tbs(1,2)*q0;
const float HK14 = vd*(HK12 + HK4 - 2*HK5) - ve*(-HK0 + 2*HK1 + HK13) + vn*(HK10 + HK11);
const float HK15 = Tbs(1,0)*q1;
const float HK16 = Tbs(1,0)*q0;
const float HK17 = -vd*(HK16 - HK2 + 2*HK3) + ve*(HK11 + HK15) + vn*(-2*HK0 + HK1 + HK13);
const float HK18 = vd*(HK10 + HK15) + ve*(HK16 - 2*HK2 + HK3) - vn*(HK12 + 2*HK4 + HK6);
const float HK19 = q0*q2;
const float HK20 = q1*q3;
const float HK21 = HK19 + HK20;
const float HK22 = 2*Tbs(1,2);
const float HK23 = q0*q3;
const float HK24 = q1*q2;
const float HK25 = HK23 - HK24;
const float HK26 = 2*Tbs(1,1);
const float HK27 = 2*(q2)*(q2);
const float HK28 = 2*(q3)*(q3) - 1;
const float HK29 = HK27 + HK28;
const float HK30 = -HK21*HK22 + HK25*HK26 + HK29*Tbs(1,0);
const float HK31 = HK23 + HK24;
const float HK32 = 2*Tbs(1,0);
const float HK33 = q0*q1;
const float HK34 = q2*q3;
const float HK35 = HK33 - HK34;
const float HK36 = 2*(q1)*(q1);
const float HK37 = HK28 + HK36;
const float HK38 = HK22*HK35 - HK31*HK32 + HK37*Tbs(1,1);
const float HK39 = HK33 + HK34;
const float HK40 = HK19 - HK20;
const float HK41 = HK27 + HK36 - 1;
const float HK42 = -HK26*HK39 + HK32*HK40 + HK41*Tbs(1,2);
const float HK43 = 2*HK7;
const float HK44 = 2*HK14*P(0,1) + 2*HK17*P(0,2) + 2*HK18*P(0,3) - HK30*P(0,4) - HK38*P(0,5) - HK42*P(0,6) - HK43*P(0,0);
const float HK45 = 1.0F/((range)*(range));
const float HK46 = 2*HK14*P(1,6) + 2*HK17*P(2,6) + 2*HK18*P(3,6) - HK30*P(4,6) - HK38*P(5,6) - HK42*P(6,6) - HK43*P(0,6);
const float HK47 = 2*HK14*P(1,5) + 2*HK17*P(2,5) + 2*HK18*P(3,5) - HK30*P(4,5) - HK38*P(5,5) - HK42*P(5,6) - HK43*P(0,5);
const float HK48 = 2*HK14*P(1,4) + 2*HK17*P(2,4) + 2*HK18*P(3,4) - HK30*P(4,4) - HK38*P(4,5) - HK42*P(4,6) - HK43*P(0,4);
const float HK49 = 2*HK14*P(1,3) + 2*HK17*P(2,3) + 2*HK18*P(3,3) - HK30*P(3,4) - HK38*P(3,5) - HK42*P(3,6) - HK43*P(0,3);
const float HK50 = 2*HK14*P(1,2) + 2*HK17*P(2,2) + 2*HK18*P(2,3) - HK30*P(2,4) - HK38*P(2,5) - HK42*P(2,6) - HK43*P(0,2);
const float HK51 = 2*HK14*P(1,1) + 2*HK17*P(1,2) + 2*HK18*P(1,3) - HK30*P(1,4) - HK38*P(1,5) - HK42*P(1,6) - HK43*P(0,1);
const float HK52 = HK8/(2*HK14*HK45*HK51 + 2*HK17*HK45*HK50 + 2*HK18*HK45*HK49 - HK30*HK45*HK48 - HK38*HK45*HK47 - HK42*HK45*HK46 - HK43*HK44*HK45 + R_LOS);
const float HK53 = Tbs(0,0)*q2;
const float HK54 = Tbs(0,1)*q1;
const float HK55 = HK53 - HK54;
const float HK56 = Tbs(0,1)*q3;
const float HK57 = Tbs(0,2)*q2;
const float HK58 = HK56 - HK57;
const float HK59 = Tbs(0,0)*q3;
const float HK60 = Tbs(0,2)*q1;
const float HK61 = -HK60;
const float HK62 = HK59 + HK61;
const float HK63 = Tbs(0,2)*q0;
const float HK64 = -HK53 + 2*HK54 + HK63;
const float HK65 = Tbs(0,1)*q0;
const float HK66 = Tbs(0,1)*q2;
const float HK67 = Tbs(0,2)*q3;
const float HK68 = vd*(HK59 - 2*HK60 + HK65) + vn*(HK66 + HK67);
const float HK69 = Tbs(0,0)*q0;
const float HK70 = -HK56 + 2*HK57 + HK69;
const float HK71 = Tbs(0,0)*q1;
const float HK72 = ve*(HK67 + HK71) + vn*(-2*HK53 + HK54 + HK63);
const float HK73 = 2*HK59 + HK61 + HK65;
const float HK74 = vd*(HK66 + HK71) + ve*(-2*HK56 + HK57 + HK69);
const float HK75 = 2*Tbs(0,1);
const float HK76 = 2*Tbs(0,2);
const float HK77 = 2*Tbs(0,0);
const float HK78 = -2*HK55*vd - 2*HK58*vn + 2*HK62*ve;
const float HK79 = HK21*HK76 - HK25*HK75 - HK29*Tbs(0,0);
const float HK80 = HK31*HK77 - HK35*HK76 - HK37*Tbs(0,1);
const float HK81 = HK39*HK75 - HK40*HK77 - HK41*Tbs(0,2);
const float HK82 = -2*HK64*ve + 2*HK68;
const float HK83 = -2*HK70*vd + 2*HK72;
const float HK84 = -2*HK73*vn + 2*HK74;
const float HK85 = HK78*P(0,0) + HK79*P(0,4) + HK80*P(0,5) + HK81*P(0,6) + HK82*P(0,1) + HK83*P(0,2) + HK84*P(0,3);
const float HK86 = HK78*P(0,6) + HK79*P(4,6) + HK80*P(5,6) + HK81*P(6,6) + HK82*P(1,6) + HK83*P(2,6) + HK84*P(3,6);
const float HK87 = HK78*P(0,5) + HK79*P(4,5) + HK80*P(5,5) + HK81*P(5,6) + HK82*P(1,5) + HK83*P(2,5) + HK84*P(3,5);
const float HK88 = HK78*P(0,4) + HK79*P(4,4) + HK80*P(4,5) + HK81*P(4,6) + HK82*P(1,4) + HK83*P(2,4) + HK84*P(3,4);
const float HK89 = HK78*P(0,3) + HK79*P(3,4) + HK80*P(3,5) + HK81*P(3,6) + HK82*P(1,3) + HK83*P(2,3) + HK84*P(3,3);
const float HK90 = HK78*P(0,2) + HK79*P(2,4) + HK80*P(2,5) + HK81*P(2,6) + HK82*P(1,2) + HK83*P(2,2) + HK84*P(2,3);
const float HK91 = HK78*P(0,1) + HK79*P(1,4) + HK80*P(1,5) + HK81*P(1,6) + HK82*P(1,1) + HK83*P(1,2) + HK84*P(1,3);
const float HK92 = HK8/(HK45*HK78*HK85 + HK45*HK79*HK88 + HK45*HK80*HK87 + HK45*HK81*HK86 + HK45*HK82*HK91 + HK45*HK83*HK90 + HK45*HK84*HK89 + R_LOS);


// Observation Jacobians - axis 0
Hfusion.at<0>() = -HK7*HK9;
Hfusion.at<1>() = HK14*HK9;
Hfusion.at<2>() = HK17*HK9;
Hfusion.at<3>() = HK18*HK9;
Hfusion.at<4>() = -HK30*HK8;
Hfusion.at<5>() = -HK38*HK8;
Hfusion.at<6>() = -HK42*HK8;


// Kalman gains - axis 0
Kfusion(0) = HK44*HK52;
Kfusion(1) = HK51*HK52;
Kfusion(2) = HK50*HK52;
Kfusion(3) = HK49*HK52;
Kfusion(4) = HK48*HK52;
Kfusion(5) = HK47*HK52;
Kfusion(6) = HK46*HK52;
Kfusion(7) = HK52*(2*HK14*P(1,7) + 2*HK17*P(2,7) + 2*HK18*P(3,7) - HK30*P(4,7) - HK38*P(5,7) - HK42*P(6,7) - HK43*P(0,7));
Kfusion(8) = HK52*(2*HK14*P(1,8) + 2*HK17*P(2,8) + 2*HK18*P(3,8) - HK30*P(4,8) - HK38*P(5,8) - HK42*P(6,8) - HK43*P(0,8));
Kfusion(9) = HK52*(2*HK14*P(1,9) + 2*HK17*P(2,9) + 2*HK18*P(3,9) - HK30*P(4,9) - HK38*P(5,9) - HK42*P(6,9) - HK43*P(0,9));
Kfusion(10) = HK52*(2*HK14*P(1,10) + 2*HK17*P(2,10) + 2*HK18*P(3,10) - HK30*P(4,10) - HK38*P(5,10) - HK42*P(6,10) - HK43*P(0,10));
Kfusion(11) = HK52*(2*HK14*P(1,11) + 2*HK17*P(2,11) + 2*HK18*P(3,11) - HK30*P(4,11) - HK38*P(5,11) - HK42*P(6,11) - HK43*P(0,11));
Kfusion(12) = HK52*(2*HK14*P(1,12) + 2*HK17*P(2,12) + 2*HK18*P(3,12) - HK30*P(4,12) - HK38*P(5,12) - HK42*P(6,12) - HK43*P(0,12));
Kfusion(13) = HK52*(2*HK14*P(1,13) + 2*HK17*P(2,13) + 2*HK18*P(3,13) - HK30*P(4,13) - HK38*P(5,13) - HK42*P(6,13) - HK43*P(0,13));
Kfusion(14) = HK52*(2*HK14*P(1,14) + 2*HK17*P(2,14) + 2*HK18*P(3,14) - HK30*P(4,14) - HK38*P(5,14) - HK42*P(6,14) - HK43*P(0,14));
Kfusion(15) = HK52*(2*HK14*P(1,15) + 2*HK17*P(2,15) + 2*HK18*P(3,15) - HK30*P(4,15) - HK38*P(5,15) - HK42*P(6,15) - HK43*P(0,15));
Kfusion(16) = HK52*(2*HK14*P(1,16) + 2*HK17*P(2,16) + 2*HK18*P(3,16) - HK30*P(4,16) - HK38*P(5,16) - HK42*P(6,16) - HK43*P(0,16));
Kfusion(17) = HK52*(2*HK14*P(1,17) + 2*HK17*P(2,17) + 2*HK18*P(3,17) - HK30*P(4,17) - HK38*P(5,17) - HK42*P(6,17) - HK43*P(0,17));
Kfusion(18) = HK52*(2*HK14*P(1,18) + 2*HK17*P(2,18) + 2*HK18*P(3,18) - HK30*P(4,18) - HK38*P(5,18) - HK42*P(6,18) - HK43*P(0,18));
Kfusion(19) = HK52*(2*HK14*P(1,19) + 2*HK17*P(2,19) + 2*HK18*P(3,19) - HK30*P(4,19) - HK38*P(5,19) - HK42*P(6,19) - HK43*P(0,19));
Kfusion(20) = HK52*(2*HK14*P(1,20) + 2*HK17*P(2,20) + 2*HK18*P(3,20) - HK30*P(4,20) - HK38*P(5,20) - HK42*P(6,20) - HK43*P(0,20));
Kfusion(21) = HK52*(2*HK14*P(1,21) + 2*HK17*P(2,21) + 2*HK18*P(3,21) - HK30*P(4,21) - HK38*P(5,21) - HK42*P(6,21) - HK43*P(0,21));
Kfusion(22) = HK52*(2*HK14*P(1,22) + 2*HK17*P(2,22) + 2*HK18*P(3,22) - HK30*P(4,22) - HK38*P(5,22) - HK42*P(6,22) - HK43*P(0,22));
Kfusion(23) = HK52*(2*HK14*P(1,23) + 2*HK17*P(2,23) + 2*HK18*P(3,23) - HK30*P(4,23) - HK38*P(5,23) - HK42*P(6,23) - HK43*P(0,23));


// Observation Jacobians - axis 1
Hfusion.at<0>() = -HK9*(-HK55*vd - HK58*vn + HK62*ve);
Hfusion.at<1>() = -HK9*(-HK64*ve + HK68);
Hfusion.at<2>() = -HK9*(-HK70*vd + HK72);
Hfusion.at<3>() = -HK9*(-HK73*vn + HK74);
Hfusion.at<4>() = -HK8*(2*HK21*Tbs(0,2) - HK25*HK75 - HK29*Tbs(0,0));
Hfusion.at<5>() = -HK8*(2*HK31*Tbs(0,0) - HK35*HK76 - HK37*Tbs(0,1));
Hfusion.at<6>() = -HK8*(2*HK39*Tbs(0,1) - HK40*HK77 - HK41*Tbs(0,2));


// Kalman gains - axis 1
Kfusion(0) = -HK85*HK92;
Kfusion(1) = -HK91*HK92;
Kfusion(2) = -HK90*HK92;
Kfusion(3) = -HK89*HK92;
Kfusion(4) = -HK88*HK92;
Kfusion(5) = -HK87*HK92;
Kfusion(6) = -HK86*HK92;
Kfusion(7) = -HK92*(HK78*P(0,7) + HK79*P(4,7) + HK80*P(5,7) + HK81*P(6,7) + HK82*P(1,7) + HK83*P(2,7) + HK84*P(3,7));
Kfusion(8) = -HK92*(HK78*P(0,8) + HK79*P(4,8) + HK80*P(5,8) + HK81*P(6,8) + HK82*P(1,8) + HK83*P(2,8) + HK84*P(3,8));
Kfusion(9) = -HK92*(HK78*P(0,9) + HK79*P(4,9) + HK80*P(5,9) + HK81*P(6,9) + HK82*P(1,9) + HK83*P(2,9) + HK84*P(3,9));
Kfusion(10) = -HK92*(HK78*P(0,10) + HK79*P(4,10) + HK80*P(5,10) + HK81*P(6,10) + HK82*P(1,10) + HK83*P(2,10) + HK84*P(3,10));
Kfusion(11) = -HK92*(HK78*P(0,11) + HK79*P(4,11) + HK80*P(5,11) + HK81*P(6,11) + HK82*P(1,11) + HK83*P(2,11) + HK84*P(3,11));
Kfusion(12) = -HK92*(HK78*P(0,12) + HK79*P(4,12) + HK80*P(5,12) + HK81*P(6,12) + HK82*P(1,12) + HK83*P(2,12) + HK84*P(3,12));
Kfusion(13) = -HK92*(HK78*P(0,13) + HK79*P(4,13) + HK80*P(5,13) + HK81*P(6,13) + HK82*P(1,13) + HK83*P(2,13) + HK84*P(3,13));
Kfusion(14) = -HK92*(HK78*P(0,14) + HK79*P(4,14) + HK80*P(5,14) + HK81*P(6,14) + HK82*P(1,14) + HK83*P(2,14) + HK84*P(3,14));
Kfusion(15) = -HK92*(HK78*P(0,15) + HK79*P(4,15) + HK80*P(5,15) + HK81*P(6,15) + HK82*P(1,15) + HK83*P(2,15) + HK84*P(3,15));
Kfusion(16) = -HK92*(HK78*P(0,16) + HK79*P(4,16) + HK80*P(5,16) + HK81*P(6,16) + HK82*P(1,16) + HK83*P(2,16) + HK84*P(3,16));
Kfusion(17) = -HK92*(HK78*P(0,17) + HK79*P(4,17) + HK80*P(5,17) + HK81*P(6,17) + HK82*P(1,17) + HK83*P(2,17) + HK84*P(3,17));
Kfusion(18) = -HK92*(HK78*P(0,18) + HK79*P(4,18) + HK80*P(5,18) + HK81*P(6,18) + HK82*P(1,18) + HK83*P(2,18) + HK84*P(3,18));
Kfusion(19) = -HK92*(HK78*P(0,19) + HK79*P(4,19) + HK80*P(5,19) + HK81*P(6,19) + HK82*P(1,19) + HK83*P(2,19) + HK84*P(3,19));
Kfusion(20) = -HK92*(HK78*P(0,20) + HK79*P(4,20) + HK80*P(5,20) + HK81*P(6,20) + HK82*P(1,20) + HK83*P(2,20) + HK84*P(3,20));
Kfusion(21) = -HK92*(HK78*P(0,21) + HK79*P(4,21) + HK80*P(5,21) + HK81*P(6,21) + HK82*P(1,21) + HK83*P(2,21) + HK84*P(3,21));
Kfusion(22) = -HK92*(HK78*P(0,22) + HK79*P(4,22) + HK80*P(5,22) + HK81*P(6,22) + HK82*P(1,22) + HK83*P(2,22) + HK84*P(3,22));
Kfusion(23) = -HK92*(HK78*P(0,23) + HK79*P(4,23) + HK80*P(5,23) + HK81*P(6,23) + HK82*P(1,23) + HK83*P(2,23) + HK84*P(3,23));


